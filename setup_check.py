"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞ –∫ –∑–∞–ø—É—Å–∫—É
"""
import os
import sys


def print_header(text):
    """–ü–µ—á–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
    print("\n" + "="*60)
    print(f"  {text}")
    print("="*60 + "\n")


def print_step(number, text, status=None):
    """–ü–µ—á–∞—Ç—å —à–∞–≥–∞"""
    if status is None:
        print(f"\n{number}. {text}")
    elif status:
        print(f"   ‚úÖ {text}")
    else:
        print(f"   ‚ùå {text}")


def check_python_version():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python"""
    print_step(1, "–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python")
    
    version = sys.version_info
    if version.major >= 3 and version.minor >= 8:
        print_step("", f"Python {version.major}.{version.minor}.{version.micro}", True)
        return True
    else:
        print_step("", f"Python {version.major}.{version.minor}.{version.micro} (—Ç—Ä–µ–±—É–µ—Ç—Å—è 3.8+)", False)
        return False


def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    print_step(2, "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
    
    required = {
        'telegram': 'python-telegram-bot',
        'dotenv': 'python-dotenv'
    }
    
    all_installed = True
    
    for module, package in required.items():
        try:
            __import__(module)
            print_step("", f"{package} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", True)
        except ImportError:
            print_step("", f"{package} –ù–ï —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", False)
            all_installed = False
    
    if not all_installed:
        print("\n   üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install -r requirements.txt")
    
    return all_installed


def check_env_file():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è .env —Ñ–∞–π–ª–∞"""
    print_step(3, "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ .env")
    
    if os.path.exists('.env'):
        print_step("", "–§–∞–π–ª .env —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", True)
        return True
    else:
        print_step("", "–§–∞–π–ª .env –ù–ï –Ω–∞–π–¥–µ–Ω", False)
        print("\n   üí° –°–∫–æ–ø–∏—Ä—É–π—Ç–µ .env.example –≤ .env –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ")
        return False


def check_config():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print_step(4, "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
    
    try:
        from config import Config
        config = Config()
        
        checks = {
            'BOT_TOKEN': bool(config.BOT_TOKEN),
            'CHANNEL_ID': bool(config.CHANNEL_ID),
            'PHONE_NUMBER': config.PHONE_NUMBER != '+1234567890',
            'OWNER_ID': config.OWNER_ID != 0
        }
        
        all_ok = True
        for key, value in checks.items():
            if value:
                print_step("", f"{key} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", True)
            else:
                print_step("", f"{key} –ù–ï —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω", False)
                all_ok = False
        
        if not all_ok:
            print("\n   üí° –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –≤ —Ñ–∞–π–ª–µ .env")
        
        return all_ok
        
    except Exception as e:
        print_step("", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}", False)
        return False


def check_files():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    print_step(5, "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞")
    
    required_files = [
        'bot.py',
        'config.py',
        'storage.py',
        'requirements.txt'
    ]
    
    all_exist = True
    for file in required_files:
        if os.path.exists(file):
            print_step("", f"{file} –Ω–∞–π–¥–µ–Ω", True)
        else:
            print_step("", f"{file} –ù–ï –Ω–∞–π–¥–µ–Ω", False)
            all_exist = False
    
    return all_exist


def check_bot_connection():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram"""
    print_step(6, "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram")
    
    try:
        import asyncio
        from telegram import Bot
        from config import Config
        
        config = Config()
        
        if not config.BOT_TOKEN:
            print_step("", "BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É", False)
            return False
        
        async def test_connection():
            bot = Bot(token=config.BOT_TOKEN)
            me = await bot.get_me()
            return me
        
        me = asyncio.run(test_connection())
        print_step("", f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ! –ë–æ—Ç: @{me.username}", True)
        return True
        
    except Exception as e:
        print_step("", f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)[:50]}...", False)
        print("\n   üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å BOT_TOKEN –≤ .env")
        return False


def check_channel_access():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É"""
    print_step(7, "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É")
    
    try:
        import asyncio
        from telegram import Bot
        from config import Config
        
        config = Config()
        
        if not config.BOT_TOKEN or not config.CHANNEL_ID:
            print_step("", "BOT_TOKEN –∏–ª–∏ CHANNEL_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã", False)
            return False
        
        async def test_channel():
            bot = Bot(token=config.BOT_TOKEN)
            chat = await bot.get_chat(config.CHANNEL_ID)
            return chat
        
        chat = asyncio.run(test_channel())
        print_step("", f"–î–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É –µ—Å—Ç—å! –ö–∞–Ω–∞–ª: {chat.title}", True)
        return True
        
    except Exception as e:
        print_step("", f"–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É: {str(e)[:50]}...", False)
        print("\n   üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:")
        print("      - –ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
        print("      - CHANNEL_ID —É–∫–∞–∑–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å -100)")
        return False


def print_summary(results):
    """–ü–µ—á–∞—Ç—å –∏—Ç–æ–≥–æ–≤"""
    print_header("–ò–¢–û–ì–ò –ü–†–û–í–ï–†–ö–ò")
    
    total = len(results)
    passed = sum(results.values())
    
    print(f"–ü—Ä–æ–π–¥–µ–Ω–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: {passed}/{total}\n")
    
    if passed == total:
        print("üéâ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´!")
        print("\n‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É!")
        print("\nüìù –î–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: python bot.py")
    else:
        print("‚ö†Ô∏è –ù–ï–ö–û–¢–û–†–´–ï –ü–†–û–í–ï–†–ö–ò –ù–ï –ü–†–û–ô–î–ï–ù–´")
        print("\n–ù–µ –ø—Ä–æ–π–¥–µ–Ω—ã:")
        for name, status in results.items():
            if not status:
                print(f"   ‚ùå {name}")
        
        print("\nüìö –î–ª—è –ø–æ–º–æ—â–∏ –æ—Ç–∫—Ä–æ–π—Ç–µ:")
        print("   - START_HERE.md - –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç")
        print("   - QUICKSTART.md - –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")
        print("   - README.md - –ü–æ–ª–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print_header("–ü–†–û–í–ï–†–ö–ê –ì–û–¢–û–í–ù–û–°–¢–ò TELEGRAM –ë–û–¢–ê")
    
    results = {}
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    results['Python 3.8+'] = check_python_version()
    results['–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏'] = check_dependencies()
    results['–§–∞–π–ª .env'] = check_env_file()
    results['–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è'] = check_config()
    results['–§–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞'] = check_files()
    results['–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram'] = check_bot_connection()
    results['–î–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É'] = check_channel_access()
    
    # –ü–µ—á–∞—Ç–∞–µ–º –∏—Ç–æ–≥–∏
    print_summary(results)
    
    print("\n" + "="*60 + "\n")


if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")