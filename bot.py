"""
Telegram Bot –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–µ–Ω—é –∫–∞–Ω–∞–ª–∞ –∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –æ–±—Å—É–∂–¥–µ–Ω–∏–π
"""
import logging
import os
import re
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)
from telegram.constants import ParseMode
from config import Config
from storage import Storage

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)


class MenuBot:
    def __init__(self):
        self.config = Config()
        self.storage = Storage()
        
    def is_admin(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
        admins = self.storage.get_admins()
        logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤: user_id={user_id}, admins={admins}, is_admin={user_id in admins}")
        return user_id in admins
    
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        
        if self.is_admin(user.id):
            await update.message.reply_text(
                f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
                "–í—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –±–æ—Ç–∞. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
                "üìã /set_menu - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤–æ–µ –º–µ–Ω—é\n"
                "‚úèÔ∏è /edit_menu - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –º–µ–Ω—é\n"
                "üì§ /publish_menu - –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å –º–µ–Ω—é –≤ –∫–∞–Ω–∞–ª–µ\n"
                "‚ÑπÔ∏è /menu_info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º –º–µ–Ω—é\n"
                "‚å®Ô∏è /setup_keyboard - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å inline-–∫–Ω–æ–ø–∫—É –º–µ–Ω—é –≤ –≥—Ä—É–ø–ø–µ\n"
                "üîò /enable_menu_button - –í–∫–ª—é—á–∏—Ç—å –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é –∫–Ω–æ–ø–∫—É '–ú–µ–Ω—é –Ω–∞ —Å–µ–≥–æ–¥–Ω—è' –≤–Ω–∏–∑—É —á–∞—Ç–∞\n\n"
                "üìû /set_phone <–Ω–æ–º–µ—Ä> - –ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –∑–∞–∫–∞–∑–æ–≤\n"
                "üì± /show_phone - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n\n"
                "üë• /add_admin <user_id> - –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
                "‚ùå /remove_admin <user_id> - –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
                "üìù /list_admins - –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤\n"
                "üîç /chat_info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ (–¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏)"
            )
        else:
            await update.message.reply_text(
                f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
                "–≠—Ç–æ –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–µ–Ω—é –∫–∞–Ω–∞–ª–∞."
            )
    
    async def set_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–µ–Ω—é"""
        user_id = update.effective_user.id
        
        if not self.is_admin(user_id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        
        await update.message.reply_text(
            "üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –º–µ–Ω—é.\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:\n"
            "‚Ä¢ *–∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç*\n"
            "‚Ä¢ _–∫—É—Ä—Å–∏–≤_\n"
            "‚Ä¢ `–º–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω—ã–π`\n\n"
            "–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞, –≤—ã —Å–º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)."
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –º–µ–Ω—é
        context.user_data['awaiting_menu_text'] = True
    
    async def handle_menu_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –º–µ–Ω—é"""
        user_id = update.effective_user.id
        
        if not self.is_admin(user_id):
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        if context.user_data.get('editing_menu_text'):
            await self.handle_edit_text(update, context)
            return
        
        if context.user_data.get('awaiting_menu_text'):
            menu_text = update.message.text
            context.user_data['menu_text'] = menu_text
            context.user_data['awaiting_menu_text'] = False
            
            await update.message.reply_text(
                "‚úÖ –¢–µ–∫—Å—Ç –º–µ–Ω—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\n"
                "üì∏ –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –º–µ–Ω—é (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å)."
            )
            context.user_data['awaiting_menu_photo'] = True
    
    async def handle_menu_photo(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –º–µ–Ω—é"""
        user_id = update.effective_user.id
        
        if not self.is_admin(user_id):
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        if context.user_data.get('editing_menu_photo'):
            await self.handle_edit_photo(update, context)
            return
        
        if context.user_data.get('awaiting_menu_photo'):
            photo = update.message.photo[-1]  # –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ –Ω–∞–∏–±–æ–ª—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
            photo_file_id = photo.file_id
            
            menu_text = context.user_data.get('menu_text', '')
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ–Ω—é
            self.storage.save_menu(menu_text, photo_file_id)
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            context.user_data.clear()
            
            await update.message.reply_text(
                "‚úÖ –ú–µ–Ω—é —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /publish_menu –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª–µ."
            )
    
    async def skip_photo(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü—Ä–æ–ø—É—Å–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ"""
        user_id = update.effective_user.id
        
        if not self.is_admin(user_id):
            return
        
        if context.user_data.get('awaiting_menu_photo'):
            menu_text = context.user_data.get('menu_text', '')
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ–Ω—é –±–µ–∑ —Ñ–æ—Ç–æ
            self.storage.save_menu(menu_text, None)
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            context.user_data.clear()
            
            await update.message.reply_text(
                "‚úÖ –ú–µ–Ω—é —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ (–±–µ–∑ —Ñ–æ—Ç–æ)!\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /publish_menu –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª–µ."
            )
    
    async def edit_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ–Ω—é"""
        user_id = update.effective_user.id
        
        if not self.is_admin(user_id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ–Ω—é —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        menu_data = self.storage.get_menu()
        if not menu_data or not menu_data.get('text'):
            await update.message.reply_text(
                "‚ùå –ú–µ–Ω—é –µ—â–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.\n"
                "–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /set_menu –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–Ω—é."
            )
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –º–µ–Ω—é
        current_text = menu_data['text']
        has_photo = menu_data.get('photo') is not None
        
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –º–µ–Ω—é
            if has_photo:
                await update.message.reply_photo(
                    photo=menu_data['photo'],
                    caption=f"üìã –¢–µ–∫—É—â–µ–µ –º–µ–Ω—é:\n\n{current_text}",
                    parse_mode=ParseMode.MARKDOWN
                )
            else:
                await update.message.reply_text(
                    f"üìã –¢–µ–∫—É—â–µ–µ –º–µ–Ω—é:\n\n{current_text}",
                    parse_mode=ParseMode.MARKDOWN
                )
            
            # –ó–∞—Ç–µ–º –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–ø—Ü–∏–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            menu_options = (
                f"üì∏ –§–æ—Ç–æ: {'‚úÖ –ï—Å—Ç—å' if has_photo else '‚ùå –ù–µ—Ç'}\n\n"
                "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?\n\n"
                "1Ô∏è‚É£ /edit_text - –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –º–µ–Ω—é\n"
                "2Ô∏è‚É£ /edit_photo - –ò–∑–º–µ–Ω–∏—Ç—å/–¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ\n"
                "3Ô∏è‚É£ /remove_photo - –£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ\n"
                "4Ô∏è‚É£ /cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"
            )
            
            await update.message.reply_text(menu_options)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –º–µ–Ω—é –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –º–µ–Ω—é.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –Ω–∞–ø—Ä—è–º—É—é:\n\n"
                "1Ô∏è‚É£ /edit_text - –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –º–µ–Ω—é\n"
                "2Ô∏è‚É£ /edit_photo - –ò–∑–º–µ–Ω–∏—Ç—å/–¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ\n"
                "3Ô∏è‚É£ /remove_photo - –£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ"
            )
    
    async def edit_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –º–µ–Ω—é"""
        user_id = update.effective_user.id
        
        if not self.is_admin(user_id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        
        await update.message.reply_text(
            "üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –º–µ–Ω—é.\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:\n"
            "‚Ä¢ *–∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç*\n"
            "‚Ä¢ _–∫—É—Ä—Å–∏–≤_\n"
            "‚Ä¢ `–º–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω—ã–π`\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
        )
        
        context.user_data['editing_menu_text'] = True
    
    async def edit_photo(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–æ—Ç–æ –º–µ–Ω—é"""
        user_id = update.effective_user.id
        
        if not self.is_admin(user_id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        
        await update.message.reply_text(
            "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –¥–ª—è –º–µ–Ω—é.\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
        )
        
        context.user_data['editing_menu_photo'] = True
    
    async def remove_photo(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–£–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ –∏–∑ –º–µ–Ω—é"""
        user_id = update.effective_user.id
        
        if not self.is_admin(user_id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        
        menu_data = self.storage.get_menu()
        if not menu_data or not menu_data.get('photo'):
            await update.message.reply_text("‚ùå –£ –º–µ–Ω—é –Ω–µ—Ç —Ñ–æ—Ç–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ–Ω—é –±–µ–∑ —Ñ–æ—Ç–æ
        self.storage.save_menu(menu_data['text'], None)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –∫–∞–Ω–∞–ª–µ, –µ—Å–ª–∏ –º–µ–Ω—é –±—ã–ª–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ
        message_id = self.storage.get_menu_message_id()
        if message_id:
            try:
                await context.bot.edit_message_text(
                    chat_id=self.config.CHANNEL_ID,
                    message_id=message_id,
                    text=menu_data['text'],
                    parse_mode=ParseMode.MARKDOWN,
                    reply_markup=self._get_order_keyboard()
                )
                await update.message.reply_text(
                    "‚úÖ –§–æ—Ç–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ –º–µ–Ω—é!\n"
                    "–ú–µ–Ω—é –≤ –∫–∞–Ω–∞–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ."
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–µ–Ω—é –≤ –∫–∞–Ω–∞–ª–µ: {e}")
                await update.message.reply_text(
                    "‚úÖ –§–æ—Ç–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ –º–µ–Ω—é!\n"
                    "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –º–µ–Ω—é –≤ –∫–∞–Ω–∞–ª–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /publish_menu –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è."
                )
        else:
            await update.message.reply_text("‚úÖ –§–æ—Ç–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ –º–µ–Ω—é!")
    
    async def cancel_edit(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–º–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        user_id = update.effective_user.id
        
        if not self.is_admin(user_id):
            return
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        context.user_data.pop('editing_menu_text', None)
        context.user_data.pop('editing_menu_photo', None)
        
        await update.message.reply_text("‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    
    async def handle_edit_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –º–µ–Ω—é –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
        user_id = update.effective_user.id
        
        if not self.is_admin(user_id):
            return
        
        if context.user_data.get('editing_menu_text'):
            new_text = update.message.text
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –º–µ–Ω—é
            menu_data = self.storage.get_menu()
            photo_file_id = menu_data.get('photo') if menu_data else None
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ–Ω—é —Å –Ω–æ–≤—ã–º —Ç–µ–∫—Å—Ç–æ–º
            self.storage.save_menu(new_text, photo_file_id)
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            context.user_data.pop('editing_menu_text', None)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –∫–∞–Ω–∞–ª–µ, –µ—Å–ª–∏ –º–µ–Ω—é –±—ã–ª–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ
            message_id = self.storage.get_menu_message_id()
            if message_id:
                try:
                    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                    display_text = new_text
                    if self.config.PHONE_NUMBER not in display_text:
                        display_text += f"\n\nüìû *–¢–µ–ª–µ—Ñ–æ–Ω –¥–ª—è –∑–∞–∫–∞–∑–æ–≤:* {self.config.PHONE_NUMBER}"
                    
                    if photo_file_id:
                        await context.bot.edit_message_caption(
                            chat_id=self.config.CHANNEL_ID,
                            message_id=message_id,
                            caption=display_text,
                            parse_mode=ParseMode.MARKDOWN,
                            reply_markup=self._get_order_keyboard()
                        )
                    else:
                        await context.bot.edit_message_text(
                            chat_id=self.config.CHANNEL_ID,
                            message_id=message_id,
                            text=display_text,
                            parse_mode=ParseMode.MARKDOWN,
                            reply_markup=self._get_order_keyboard()
                        )
                    
                    await update.message.reply_text(
                        "‚úÖ –¢–µ–∫—Å—Ç –º–µ–Ω—é –æ–±–Ω–æ–≤–ª–µ–Ω!\n"
                        "–ú–µ–Ω—é –≤ –∫–∞–Ω–∞–ª–µ —Ç–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ."
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–µ–Ω—é –≤ –∫–∞–Ω–∞–ª–µ: {e}")
                    await update.message.reply_text(
                        "‚úÖ –¢–µ–∫—Å—Ç –º–µ–Ω—é –æ–±–Ω–æ–≤–ª–µ–Ω!\n"
                        "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –º–µ–Ω—é –≤ –∫–∞–Ω–∞–ª–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /publish_menu –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è."
                    )
            else:
                await update.message.reply_text(
                    "‚úÖ –¢–µ–∫—Å—Ç –º–µ–Ω—é –æ–±–Ω–æ–≤–ª–µ–Ω!\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /publish_menu –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª–µ."
                )
    
    async def handle_edit_photo(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ç–æ –º–µ–Ω—é –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
        user_id = update.effective_user.id
        
        if not self.is_admin(user_id):
            return
        
        if context.user_data.get('editing_menu_photo'):
            photo = update.message.photo[-1]
            new_photo_file_id = photo.file_id
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –º–µ–Ω—é
            menu_data = self.storage.get_menu()
            menu_text = menu_data.get('text', '') if menu_data else ''
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ–Ω—é —Å –Ω–æ–≤—ã–º —Ñ–æ—Ç–æ
            self.storage.save_menu(menu_text, new_photo_file_id)
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            context.user_data.pop('editing_menu_photo', None)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –∫–∞–Ω–∞–ª–µ, –µ—Å–ª–∏ –º–µ–Ω—é –±—ã–ª–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ
            message_id = self.storage.get_menu_message_id()
            if message_id:
                try:
                    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                    display_text = menu_text
                    if self.config.PHONE_NUMBER not in display_text:
                        display_text += f"\n\nüìû *–¢–µ–ª–µ—Ñ–æ–Ω –¥–ª—è –∑–∞–∫–∞–∑–æ–≤:* {self.config.PHONE_NUMBER}"
                    
                    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å —Ñ–æ—Ç–æ
                    await context.bot.delete_message(
                        chat_id=self.config.CHANNEL_ID,
                        message_id=message_id
                    )
                    
                    sent_message = await context.bot.send_photo(
                        chat_id=self.config.CHANNEL_ID,
                        photo=new_photo_file_id,
                        caption=display_text,
                        parse_mode=ParseMode.MARKDOWN,
                        reply_markup=self._get_order_keyboard()
                    )
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π message_id
                    self.storage.save_menu_message_id(sent_message.message_id)
                    
                    await update.message.reply_text(
                        "‚úÖ –§–æ—Ç–æ –º–µ–Ω—é –æ–±–Ω–æ–≤–ª–µ–Ω–æ!\n"
                        "–ú–µ–Ω—é –≤ –∫–∞–Ω–∞–ª–µ —Ç–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ."
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–µ–Ω—é –≤ –∫–∞–Ω–∞–ª–µ: {e}")
                    await update.message.reply_text(
                        "‚úÖ –§–æ—Ç–æ –º–µ–Ω—é –æ–±–Ω–æ–≤–ª–µ–Ω–æ!\n"
                        "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –º–µ–Ω—é –≤ –∫–∞–Ω–∞–ª–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /publish_menu –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è."
                    )
            else:
                await update.message.reply_text(
                    "‚úÖ –§–æ—Ç–æ –º–µ–Ω—é –æ–±–Ω–æ–≤–ª–µ–Ω–æ!\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /publish_menu –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª–µ."
                )
    
    def _get_order_keyboard(self):
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –∑–∞–∫–∞–∑–∞"""
        phone_clean = self.config.PHONE_NUMBER.replace('+', '').replace(' ', '').replace('-', '')
        keyboard = [
            [InlineKeyboardButton("üìû –ó–∞–∫–∞–∑–∞—Ç—å (WhatsApp)", url=f"https://wa.me/{phone_clean}")]
        ]
        return InlineKeyboardMarkup(keyboard)
    
    async def publish_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü—É–±–ª–∏–∫–∞—Ü–∏—è –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é –≤ –∫–∞–Ω–∞–ª–µ"""
        user_id = update.effective_user.id
        
        if not self.is_admin(user_id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        
        menu_data = self.storage.get_menu()
        
        if not menu_data or not menu_data.get('text'):
            await update.message.reply_text("‚ùå –ú–µ–Ω—é –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /set_menu")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –º–µ–Ω—é
        channel_id = self.config.CHANNEL_ID
        menu_text = menu_data['text']
        photo_file_id = menu_data.get('photo')
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–∫–∞–∑–∞
        # Telegram –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç tel: —Å—Å—ã–ª–∫–∏ –≤ inline –∫–Ω–æ–ø–∫–∞—Ö
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º WhatsApp —Å—Å—ã–ª–∫—É (—Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö)
        phone_clean = self.config.PHONE_NUMBER.replace('+', '').replace(' ', '').replace('-', '')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –∫–æ–Ω–µ—Ü –º–µ–Ω—é, –µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –Ω–µ—Ç
        if self.config.PHONE_NUMBER not in menu_text:
            menu_text += f"\n\nüìû *–¢–µ–ª–µ—Ñ–æ–Ω –¥–ª—è –∑–∞–∫–∞–∑–æ–≤:* {self.config.PHONE_NUMBER}"
        
        keyboard = [
            [InlineKeyboardButton("üìû –ó–∞–∫–∞–∑–∞—Ç—å (WhatsApp)", url=f"https://wa.me/{phone_clean}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω–æ–µ –º–µ–Ω—é
            message_id = self.storage.get_menu_message_id()
            
            if message_id:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                try:
                    if photo_file_id:
                        await context.bot.edit_message_media(
                            chat_id=channel_id,
                            message_id=message_id,
                            media={"type": "photo", "media": photo_file_id, "caption": menu_text, "parse_mode": ParseMode.MARKDOWN},
                            reply_markup=reply_markup
                        )
                    else:
                        await context.bot.edit_message_text(
                            chat_id=channel_id,
                            message_id=message_id,
                            text=menu_text,
                            parse_mode=ParseMode.MARKDOWN,
                            reply_markup=reply_markup
                        )
                    
                    await update.message.reply_text("‚úÖ –ú–µ–Ω—é —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª–µ!")
                    return
                    
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ.")
            
            # –ü—É–±–ª–∏–∫—É–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if photo_file_id:
                sent_message = await context.bot.send_photo(
                    chat_id=channel_id,
                    photo=photo_file_id,
                    caption=menu_text,
                    parse_mode=ParseMode.MARKDOWN,
                    reply_markup=reply_markup
                )
            else:
                sent_message = await context.bot.send_message(
                    chat_id=channel_id,
                    text=menu_text,
                    parse_mode=ParseMode.MARKDOWN,
                    reply_markup=reply_markup
                )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
            self.storage.save_menu_message_id(sent_message.message_id)
            
            await update.message.reply_text("‚úÖ –ú–µ–Ω—é —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª–µ!")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –º–µ–Ω—é: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –º–µ–Ω—é: {str(e)}")
    
    async def menu_info(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –º–µ–Ω—é"""
        user_id = update.effective_user.id
        
        if not self.is_admin(user_id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        
        menu_data = self.storage.get_menu()
        
        if not menu_data or not menu_data.get('text'):
            await update.message.reply_text("‚ùå –ú–µ–Ω—é –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
            return
        
        info = f"üìã **–¢–µ–∫—É—â–µ–µ –º–µ–Ω—é:**\n\n{menu_data['text']}\n\n"
        info += f"üì∏ –§–æ—Ç–æ: {'–î–∞' if menu_data.get('photo') else '–ù–µ—Ç'}\n"
        info += f"üìÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {menu_data.get('updated_at', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}"
        
        await update.message.reply_text(info, parse_mode=ParseMode.MARKDOWN)
    
    async def add_admin(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        user_id = update.effective_user.id
        
        if not self.is_admin(user_id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        
        if not context.args or len(context.args) != 1:
            await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_admin <user_id>")
            return
        
        try:
            new_admin_id = int(context.args[0])
            
            if self.storage.add_admin(new_admin_id):
                await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {new_admin_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã.")
            else:
                await update.message.reply_text(f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {new_admin_id} —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
                
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç user_id. –î–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ.")
    
    async def remove_admin(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        user_id = update.effective_user.id
        
        if not self.is_admin(user_id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        
        if not context.args or len(context.args) != 1:
            await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /remove_admin <user_id>")
            return
        
        try:
            admin_id_to_remove = int(context.args[0])
            
            if admin_id_to_remove == user_id:
                await update.message.reply_text("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–µ–±—è –∏–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
                return
            
            if self.storage.remove_admin(admin_id_to_remove):
                await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {admin_id_to_remove} —É–¥–∞–ª–µ–Ω –∏–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
            else:
                await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {admin_id_to_remove} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
                
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç user_id. –î–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ.")
    
    async def list_admins(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
        user_id = update.effective_user.id
        
        if not self.is_admin(user_id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        
        admins = self.storage.get_admins()
        
        if not admins:
            await update.message.reply_text("‚ùå –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –ø—É—Å—Ç.")
            return
        
        admin_list = "\n".join([f"‚Ä¢ {admin_id}" for admin_id in admins])
        await update.message.reply_text(f"üë• **–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:**\n\n{admin_list}", parse_mode=ParseMode.MARKDOWN)
    
    async def set_phone(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –∑–∞–∫–∞–∑–æ–≤"""
        user_id = update.effective_user.id
        
        if not self.is_admin(user_id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        
        if not context.args or len(context.args) != 1:
            await update.message.reply_text(
                "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /set_phone <–Ω–æ–º–µ—Ä>\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã:\n"
                "‚Ä¢ /set_phone +17736812626\n"
                "‚Ä¢ /set_phone +1 (773) 681-2626\n"
                "‚Ä¢ /set_phone 17736812626"
            )
            return
        
        new_phone = context.args[0]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ (–¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ü–∏—Ñ—Ä—ã)
        phone_digits = ''.join(filter(str.isdigit, new_phone))
        if len(phone_digits) < 10:
            await update.message.reply_text(
                "‚ùå –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π.\n"
                "–ú–∏–Ω–∏–º—É–º 10 —Ü–∏—Ñ—Ä."
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä –≤ .env —Ñ–∞–π–ª
        try:
            env_path = '.env'
            env_content = []
            phone_updated = False
            
            # –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π .env —Ñ–∞–π–ª
            if os.path.exists(env_path):
                with open(env_path, 'r', encoding='utf-8') as f:
                    env_content = f.readlines()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º PHONE_NUMBER
            new_env_content = []
            for line in env_content:
                if line.startswith('PHONE_NUMBER='):
                    new_env_content.append(f'PHONE_NUMBER={new_phone}\n')
                    phone_updated = True
                else:
                    new_env_content.append(line)
            
            # –ï—Å–ª–∏ PHONE_NUMBER –Ω–µ –±—ã–ª–æ –≤ —Ñ–∞–π–ª–µ, –¥–æ–±–∞–≤–ª—è–µ–º
            if not phone_updated:
                new_env_content.append(f'PHONE_NUMBER={new_phone}\n')
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π .env —Ñ–∞–π–ª
            with open(env_path, 'w', encoding='utf-8') as f:
                f.writelines(new_env_content)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ø–∞–º—è—Ç–∏
            self.config.PHONE_NUMBER = new_phone
            
            await update.message.reply_text(
                f"‚úÖ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!\n\n"
                f"üìû –ù–æ–≤—ã–π –Ω–æ–º–µ—Ä: {new_phone}\n\n"
                f"‚ö†Ô∏è –ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Å—Ç—É–ø–∏–ª–∏ –≤ —Å–∏–ª—É –≤ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω–æ–º –º–µ–Ω—é,\n"
                f"–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /publish_menu –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ–Ω—é –≤ –∫–∞–Ω–∞–ª–µ."
            )
            
            logger.info(f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_phone} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {e}")
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞:\n{str(e)}\n\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä –≤—Ä—É—á–Ω—É—é –≤ —Ñ–∞–π–ª–µ .env –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ."
            )
    
    async def show_phone(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
        user_id = update.effective_user.id
        
        if not self.is_admin(user_id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        
        current_phone = self.config.PHONE_NUMBER
        await update.message.reply_text(
            f"üì± –¢–µ–∫—É—â–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –∑–∞–∫–∞–∑–æ–≤:\n\n"
            f"üìû {current_phone}\n\n"
            f"–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
            f"/set_phone <–Ω–æ–≤—ã–π_–Ω–æ–º–µ—Ä>"
        )
    
    async def get_chat_info(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ (–¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏)"""
        try:
            logger.info("=== chat_info –ù–ê–ß–ê–õ–û ===")
            chat = update.effective_chat
            user_id = update.effective_user.id
            
            # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            logger.info(f"chat_info –≤—ã–∑–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")
            logger.info(f"–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {self.storage.get_admins()}")
            logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ is_admin({user_id}): {self.is_admin(user_id)}")
            
            if not self.is_admin(user_id):
                await update.message.reply_text(
                    f"‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.\n\n"
                    f"üÜî –í–∞—à ID: `{user_id}`\n"
                    f"üë• –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã: {self.storage.get_admins()}"
                )
                return
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –Ω–∞—á–∞–ª–µ chat_info: {e}", exc_info=True)
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
            return
        
        try:
            info = f"üîç –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ:\n\n"
            info += f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {chat.title or 'N/A'}\n"
            info += f"üÜî Chat ID: {chat.id}\n"
            info += f"üìä –¢–∏–ø: {chat.type}\n"
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ username
            username_text = f"@{chat.username}" if chat.username else "N/A"
            info += f"üë§ Username: {username_text}\n\n"
            
            info += f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π CHANNEL_ID: {self.config.CHANNEL_ID}\n"
            
            if str(chat.id) == str(self.config.CHANNEL_ID):
                info += "\n‚úÖ ID —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º!"
            else:
                info += "\n‚ö†Ô∏è ID –ù–ï —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º –≤ .env!"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ
            try:
                bot_member = await context.bot.get_chat_member(chat.id, context.bot.id)
                info += f"\n\nü§ñ –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:\n"
                info += f"–°—Ç–∞—Ç—É—Å: {bot_member.status}\n"
                
                if bot_member.status in ['administrator', 'creator']:
                    info += "‚úÖ –ë–æ—Ç —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º\n"
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–∞–≤–∞
                    if hasattr(bot_member, 'can_post_messages'):
                        info += f"–ú–æ–∂–µ—Ç –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å: {'‚úÖ' if bot_member.can_post_messages else '‚ùå'}\n"
                    if hasattr(bot_member, 'can_delete_messages'):
                        info += f"–ú–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å: {'‚úÖ' if bot_member.can_delete_messages else '‚ùå'}\n"
                    if hasattr(bot_member, 'can_pin_messages'):
                        info += f"–ú–æ–∂–µ—Ç –∑–∞–∫—Ä–µ–ø–ª—è—Ç—å: {'‚úÖ' if bot_member.can_pin_messages else '‚ùå'}\n"
                else:
                    info += "‚ùå –ë–æ—Ç –ù–ï —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º\n"
            except Exception as e:
                info += f"\n\n‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∞–≤–∞—Ö: {str(e)}"
            
            logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ chat_info –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            await update.message.reply_text(info)
            logger.info("chat_info —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ chat_info: {e}", exc_info=True)
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {str(e)}")
    
    async def setup_menu_keyboard(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –º–µ–Ω—é –≤ –≥—Ä—É–ø–ø–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
        user_id = update.effective_user.id
        
        if not self.is_admin(user_id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –≤ –≥—Ä—É–ø–ø–µ
        if update.effective_chat.type not in ['group', 'supergroup']:
            await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö.")
            return
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ–Ω—é —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
            menu_data = self.storage.get_menu()
            if not menu_data or not menu_data.get('text'):
                await update.message.reply_text(
                    "‚ùå –ú–µ–Ω—é –µ—â–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.\n"
                    "–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /set_menu –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–Ω—é."
                )
                return
            
            # –°–æ–∑–¥–∞–µ–º inline-–∫–Ω–æ–ø–∫—É —Å callback –¥–ª—è –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é
            keyboard = [
                [InlineKeyboardButton("üìã Menu", callback_data="show_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
            sent_message = await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="üçΩ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–µ–Ω—é:",
                reply_markup=reply_markup
            )
            
            # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–∫—Ä–µ–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                await context.bot.pin_chat_message(
                    chat_id=update.effective_chat.id,
                    message_id=sent_message.message_id,
                    disable_notification=True  # –ë–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                )
                await update.message.reply_text(
                    "‚úÖ –ö–Ω–æ–ø–∫–∞ –º–µ–Ω—é —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∞!\n\n"
                    "–í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –≥—Ä—É–ø–ø—ã –º–æ–≥—É—Ç –Ω–∞–∂–∞—Ç—å –Ω–∞ –Ω–µ—ë, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–µ–Ω—é."
                )
            except Exception as pin_error:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä–µ–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {pin_error}")
                await update.message.reply_text(
                    "‚úÖ –ö–Ω–æ–ø–∫–∞ –º–µ–Ω—é —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!\n\n"
                    "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä–µ–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –Ω–∞ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–µ."
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    
    async def enable_menu_button(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í–∫–ª—é—á–∏—Ç—å –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é –∫–Ω–æ–ø–∫—É 'Menu' –≤–Ω–∏–∑—É —á–∞—Ç–∞ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≥—Ä—É–ø–ø—ã"""
        user_id = update.effective_user.id
        
        if not self.is_admin(user_id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –≤ –≥—Ä—É–ø–ø–µ
        if update.effective_chat.type not in ['group', 'supergroup']:
            await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö.")
            return
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ–Ω—é —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
            menu_data = self.storage.get_menu()
            if not menu_data or not menu_data.get('text'):
                await update.message.reply_text(
                    "‚ùå –ú–µ–Ω—é –µ—â–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.\n"
                    "–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /set_menu –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–Ω—é."
                )
                return
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π Menu
            keyboard = [[KeyboardButton("üìã –ú–µ–Ω—é –Ω–∞ —Å–µ–≥–æ–¥–Ω—è")]]
            reply_markup = ReplyKeyboardMarkup(
                keyboard,
                resize_keyboard=True,  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Å—Ç—Ä–∞–∏–≤–∞—Ç—å —Ä–∞–∑–º–µ—Ä –∫–Ω–æ–ø–æ–∫
                one_time_keyboard=False  # –ö–Ω–æ–ø–∫–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –≤–∏–¥–∏–º–æ–π –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="‚úÖ –ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞ 'üìã –ú–µ–Ω—é –Ω–∞ —Å–µ–≥–æ–¥–Ω—è' –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!\n\n"
                     "–¢–µ–ø–µ—Ä—å –≤—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –≥—Ä—É–ø–ø—ã –º–æ–≥—É—Ç –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É —á–∞—Ç–∞, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–µ–Ω—é.",
                reply_markup=reply_markup
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ –∫–Ω–æ–ø–∫–∏ Menu: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    
    async def handle_menu_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline-–∫–Ω–æ–ø–∫—É Menu"""
        query = update.callback_query
        await query.answer()  # –£–±–∏—Ä–∞–µ–º "—á–∞—Å–∏–∫–∏" –Ω–∞ –∫–Ω–æ–ø–∫–µ
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –º–µ–Ω—é
            menu_data = self.storage.get_menu()
            
            if not menu_data or not menu_data.get('text'):
                await query.message.reply_text(
                    "‚ùå –ú–µ–Ω—é –ø–æ–∫–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                )
                return
            
            menu_text = menu_data['text']
            photo_file_id = menu_data.get('photo')
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–∫–∞–∑–∞
            phone_clean = self.config.PHONE_NUMBER.replace('+', '').replace(' ', '').replace('-', '')
            keyboard = [
                [InlineKeyboardButton("üìû –ó–∞–∫–∞–∑–∞—Ç—å (WhatsApp)", url=f"https://wa.me/{phone_clean}")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é
            if photo_file_id:
                await query.message.reply_photo(
                    photo=photo_file_id,
                    caption=menu_text,
                    parse_mode=ParseMode.MARKDOWN,
                    reply_markup=reply_markup
                )
            else:
                await query.message.reply_text(
                    menu_text,
                    parse_mode=ParseMode.MARKDOWN,
                    reply_markup=reply_markup
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –º–µ–Ω—é —á–µ—Ä–µ–∑ callback: {e}")
            await query.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é: {str(e)}")
    
    async def show_today_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –Ω–∞ —Å–µ–≥–æ–¥–Ω—è (–¥–æ—Å—Ç—É–ø–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≤ –≥—Ä—É–ø–ø–µ)"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –º–µ–Ω—é
            menu_data = self.storage.get_menu()
            
            if not menu_data or not menu_data.get('text'):
                await update.message.reply_text(
                    "‚ùå –ú–µ–Ω—é –ø–æ–∫–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                )
                return
            
            # –ü–æ–ª—É—á–∞–µ–º ID –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–µ
            message_id = self.storage.get_menu_message_id()
            channel_id = self.config.CHANNEL_ID
            
            if message_id and channel_id:
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ
                # –£–±–∏—Ä–∞–µ–º -100 –∏–∑ –Ω–∞—á–∞–ª–∞ ID –∫–∞–Ω–∞–ª–∞ –¥–ª—è —Å—Å—ã–ª–∫–∏
                channel_id_str = str(channel_id)
                if channel_id_str.startswith('-100'):
                    channel_id_clean = channel_id_str[4:]
                else:
                    channel_id_clean = channel_id_str.lstrip('-')
                
                menu_link = f"https://t.me/c/{channel_id_clean}/{message_id}"
                
                # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –º–µ–Ω—é –≤ –∫–∞–Ω–∞–ª–µ
                keyboard = [
                    [InlineKeyboardButton("üìã –û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é –≤ –∫–∞–Ω–∞–ª–µ", url=menu_link)]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await update.message.reply_text(
                    "üçΩ –ú–µ–Ω—é –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª–µ!\n\n"
                    "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å:",
                    reply_markup=reply_markup
                )
            else:
                # –ï—Å–ª–∏ –º–µ–Ω—é –Ω–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞–ø—Ä—è–º—É—é
                menu_text = menu_data['text']
                photo_file_id = menu_data.get('photo')
                
                # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–∫–∞–∑–∞
                phone_clean = self.config.PHONE_NUMBER.replace('+', '').replace(' ', '').replace('-', '')
                keyboard = [
                    [InlineKeyboardButton("üìû –ó–∞–∫–∞–∑–∞—Ç—å (WhatsApp)", url=f"https://wa.me/{phone_clean}")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                if photo_file_id:
                    await update.message.reply_photo(
                        photo=photo_file_id,
                        caption=menu_text,
                        parse_mode=ParseMode.MARKDOWN,
                        reply_markup=reply_markup
                    )
                else:
                    await update.message.reply_text(
                        menu_text,
                        parse_mode=ParseMode.MARKDOWN,
                        reply_markup=reply_markup
                    )
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –º–µ–Ω—é: {e}", exc_info=True)
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ–Ω—é.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    
    async def moderate_links(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —Å–æ —Å—Å—ã–ª–∫–∞–º–∏ –≤ –æ–±—Å—É–∂–¥–µ–Ω–∏—è—Ö –∫–∞–Ω–∞–ª–∞"""
        message = update.message or update.channel_post
        
        if not message or not message.text:
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –æ–±—Å—É–∂–¥–µ–Ω–∏–π –∫–∞–Ω–∞–ª–∞
        if message.chat.type not in ['group', 'supergroup']:
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        user_id = message.from_user.id if message.from_user else None
        if user_id and self.is_admin(user_id):
            return  # –ê–¥–º–∏–Ω—ã –º–æ–≥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å—Å—ã–ª–∫–∏
        
        # –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—Å—ã–ª–æ–∫
        url_pattern = re.compile(
            r'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+'
            r'|(?:www\.)[a-zA-Z0-9-]+\.[a-zA-Z]{2,}'
            r'|(?:[a-zA-Z0-9-]+\.)+[a-zA-Z]{2,}'
            r'|t\.me/[a-zA-Z0-9_]+'
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—Å—ã–ª–æ–∫
        if url_pattern.search(message.text):
            try:
                await message.delete()
                logger.info(f"–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Å—ã–ª–∫–æ–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
                warning = await context.bot.send_message(
                    chat_id=message.chat_id,
                    text="‚ö†Ô∏è –°—Å—ã–ª–∫–∏ –≤ –æ–±—Å—É–∂–¥–µ–Ω–∏—è—Ö –∑–∞–ø—Ä–µ—â–µ–Ω—ã –∏ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã.",
                    reply_to_message_id=message.message_id if message.message_id else None
                )
                
                # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
                await context.application.job_queue.run_once(
                    lambda ctx: warning.delete(),
                    when=5
                )
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        application = Application.builder().token(self.config.BOT_TOKEN).build()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler("start", self.start))
        application.add_handler(CommandHandler("set_menu", self.set_menu))
        application.add_handler(CommandHandler("edit_menu", self.edit_menu))
        application.add_handler(CommandHandler("edit_text", self.edit_text))
        application.add_handler(CommandHandler("edit_photo", self.edit_photo))
        application.add_handler(CommandHandler("remove_photo", self.remove_photo))
        application.add_handler(CommandHandler("cancel", self.cancel_edit))
        application.add_handler(CommandHandler("skip", self.skip_photo))
        application.add_handler(CommandHandler("publish_menu", self.publish_menu))
        application.add_handler(CommandHandler("menu_info", self.menu_info))
        application.add_handler(CommandHandler("add_admin", self.add_admin))
        application.add_handler(CommandHandler("remove_admin", self.remove_admin))
        application.add_handler(CommandHandler("list_admins", self.list_admins))
        application.add_handler(CommandHandler("set_phone", self.set_phone))
        application.add_handler(CommandHandler("show_phone", self.show_phone))
        application.add_handler(CommandHandler("chat_info", self.get_chat_info))
        application.add_handler(CommandHandler("setup_keyboard", self.setup_menu_keyboard))
        application.add_handler(CommandHandler("enable_menu_button", self.enable_menu_button))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è inline-–∫–Ω–æ–ø–∫–∏ Menu
        application.add_handler(CallbackQueryHandler(self.handle_menu_callback, pattern="^show_menu$"))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        application.add_handler(
            MessageHandler(
                filters.TEXT & ~filters.COMMAND & filters.ChatType.PRIVATE,
                self.handle_menu_text
            )
        )
        application.add_handler(
            MessageHandler(
                filters.PHOTO & filters.ChatType.PRIVATE,
                self.handle_menu_photo
            )
        )
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ú–µ–Ω—é –Ω–∞ —Å–µ–≥–æ–¥–Ω—è" –∏ "Menu" –≤ –≥—Ä—É–ø–ø–∞—Ö
        application.add_handler(
            MessageHandler(
                filters.Regex(r'^(–ú–µ–Ω—é –Ω–∞ —Å–µ–≥–æ–¥–Ω—è|üìã –ú–µ–Ω—é –Ω–∞ —Å–µ–≥–æ–¥–Ω—è|üìã Menu|Menu)$') & filters.ChatType.GROUPS,
                self.show_today_menu
            )
        )
        
        # –ú–æ–¥–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–æ–∫ –≤ –≥—Ä—É–ø–ø–∞—Ö/–æ–±—Å—É–∂–¥–µ–Ω–∏—è—Ö
        application.add_handler(
            MessageHandler(
                filters.TEXT & filters.ChatType.GROUPS,
                self.moderate_links
            )
        )
        
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == '__main__':
    bot = MenuBot()
    bot.run()